[general]
execution_type = inference
#active_config = tao-mobilenet_small-ladder-multiclass
active_config=load_only

[load_only]
trained_model_path=/media/jan/Data/ubuntu_data_dir/git/MasterThesis/FenderDetection/deepspeed/saved_models/2022-05-25 17:29:08_tao-mobilenet_small-fender_acc_0.997

[tao-mobilenet_small-ladder-multiclass]
name = mobilenet_v3_small
input_size = (500, 125)
loss_function = nn.BCEWithLogitsLoss(pos_weight=torch.tensor([28,32,1,16.5]))
batch_size = 64
num_epochs = 5
early_stopping=5
class_names = ["bended", "blocked", "unbroken", "rope"]
feature_extract = false
use_pretrained = true
deepspeed_config_path = ds_config.json
dataloader_path = /media/jan/Data/ubuntu_data_dir/git/MasterThesis/deepstream/out_crops_train_val/ladder/multiclass/
trained_model_path = /media/jan/Data/ubuntu_data_dir/git/MasterThesis/FenderDetection/deepspeed/saved_models/2022-05-24 22:10:31_tao-mobilenet_small-ladder-multiclass_acc_0.899
copy_to_deepspeed_config_after_export = pytorch/mobilenetS_fender_classifier_tao_data
normalize = false
resize = true
train_horizontal_flip = true
test_center_crop = false
grayscale = true
canny_edge = true

[resnet-ladder-multiclass]
name = resnet
input_size = (500,120)
dataloader_path = /media/jan/Data/ubuntu_data_dir/git/output_0.8/cropped_images_multiclass/
loss_function = nn.BCEWithLogitsLoss(weight=torch.tensor([5.0,5.0,1.0,5.0]), reduction='mean')
class_names = ["bended", "blocked", "unbroken", "rope"]
batch_size = 64
num_epochs = 50
num_layers = 34
feature_extract = false
use_pretrained = true
deepspeed_config_path = ds_config.json
trained_model_path = /media/jan/Data/ubuntu_data_dir/git/MasterThesis/FenderDetection/deepspeed/saved_models/resnet-ladder-multiclass_Fri May 13 21:16:38 2022_acc_0.623
copy_to_deepspeed_config_after_export = pytorch/ladder_multiclassifier
normalize = false
resize = true
train_horizontal_flip = true
test_center_crop = false

